<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE knimeNode PUBLIC "-//UNIKN//DTD KNIME Node 2.0//EN" "http://www.knime.org/Node.dtd">
<knimeNode icon="./joiner_neu.png" type="Manipulator">
    <name>Joiner (deprecated)</name>
    <shortDescription>Joins two tables</shortDescription>
    <fullDescription>
        <intro>
            This node joins two tables in a database-like way. The join is based either on the row IDs of both tables or
            on the row ID of the first table and an arbitrary column from the second table.
            <br />
            If you want to join based on two columns, you first have to set the row IDs from either table by using the
            Row ID node.
        </intro>
        <option name="Join column from second table">
            Select the column from the second input table that should be used for joining. You may selected a real
            column or the table's row ID here. You must make sure, that the type of selected column matches the type of
            the row ID in the first table! If e.g. the row IDs in the first table are StringCells and the selected
            column from the second table are IntCells joining will fail although they may contain the same numbers.
        </option>
        <option name="Duplicate column handling">
            The option allows you to change the behaviour if both input tables contain columns with the same name. If
            "Don't execute" is selected, the node will not be executed i.e. it stays red. The second choice is to filter
            the duplicate columns, i.e. only the columns from the first input table will show up in the ouput table. As
            a third option you can append a suffix to duplicate column names so that they are also available at the
            output table.
        </option>
        <option name="Join mode">
            If a row from the first table cannot be joined with a row from the second table (and vice versa) there are
            several options of handling this situation. After an
            <b>Inner Join</b>
            only matching rows will show up in the output table. A
            <b>Left Outer Join</b>
            will fill up the columns that come from the second table with missing values if no matching row exists in
            the second table. Likewise, a
            <b>Right Outer Join</b>
            will fill up the columns from the first table with missing values if no matching row in the first table
            exists. A
            <b>Full Outer Join</b>
            will fill up columns from both the first and second table with missing values if a row cannot be joined.
        </option>
        <option name="Multiple-match row ID suffix">
            If several rows from the second table match to one row from the first table, the
            row ID from the first table's row is extended by this suffix and a number.
            In some cases it is necessary to manually change the suffix if the extended row ID
            is equal to an existing row ID (which causes DuplicateRowKeyExceptions). 
        </option>
    </fullDescription>
    <ports>
        <inPort index="0" name="Left table">Table contributing to the left part of the output table</inPort>
        <inPort index="1" name="Right table">Table contributing to the right part of the output table</inPort>
        <outPort index="0" name="Joined table">Joined Table</outPort>
    </ports>
</knimeNode>
